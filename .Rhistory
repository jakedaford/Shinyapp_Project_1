hist(myF, 500)
hist(myF, 50)
nsims=10000
n1 = 50
n2 = 50
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
#hist(chisims, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF, 500)
nsims=10000
n1 = 25
n2 = 50
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
#hist(chisims, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF, 500)
nsims=10000
n1 = 1
n2 = 1
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
#hist(chisims, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF, 500)
hist(myF, 50)
hist(myF, 5)
hist(myF)
nsims=10000
n1 = 2
n2 = 1
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
#hist(chisims, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF)
hist(myF, 50)
nsims=10000
n1 = 20
n2 = 1
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
#hist(chisims, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF, 50)
hist(myF, 500)
hist(chisims, 500)
hist(chisims1, 500)
hist(chisims2, 500)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF, 500)
hist(myF, 5000)
hist(myF)
nsims=10000
n1 = 100
n2 = 100
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
hist(chisims1, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
hist(chisims2, 500)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF)
hist(myF,500)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF,500)
Rsf = rf(nsims, n1, n2)
hist(myF, 40, col = 'blue')
hist(Rsf, 40, col = 'red', add = T)
nsims=10000
n1 = 1
n2 = 1
x = matrix(rnorm(nsims * n1), nrow = n1,)
xsq = x * x
chisims1 = colSums(xsq)
hist(chisims1, 500)
x2 = matrix(rnorm(nsims * n2), nrow = n2,)
xsq2 = x2 * x2
chisims2 = colSums(xsq2)
hist(chisims2, 500)
myF = (chisims1/n1) / (chisims2/n2)
hist(myF,500)
Rsf = rf(nsims, n1, n2)
hist(myF, 40, col = 'blue')
hist(Rsf, 40, col = 'red', add = T)
hist(myF, 40, col = 'blue')
hist(myF, 40, col = 'blue', xlim = 1)
?hist
hist(myF, 40, col = 'blue', xlim = c(0,1))
hist(myF, 4000, col = 'blue', xlim = c(0,1))
hist(myF, 4000, col = 'blue', xlim = c(0,2))
hist(myF, 4000, col = 'blue', xlim = c(0,20))
hist(myF, 4000, col = 'blue', xlim = c(-1,1))
hist(myF, 40, col = 'blue', xlim = c(-1,1))
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
View(temp)
temp
plot(density(temp$Body.Temp), main = "Sample Distribution of Heights")
plot(density(temp$Heart.Rate), main = "Sample Distribution of Heights")
table(temp)
table(temp[, c(1,3)])
head(temp)
temp %>% filter(Gender == 'Male')
library(dplyr)
library(ggplot2)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
mean(temp$Body.Temp)
mean(temp$Heart.Rate)
temp %>% group_by(Gender) %>%
summarise(avg_temp = mean(Body.Temp), sd_temp = sd(Body.Temp),
avg_heart = mean(Heart.Rate), sd_heart = sd(Heart.Rate))
head(temp)
g + geom_bar(aes(x = Body.Temp))
g = ggplot(temp)
g + geom_bar(aes(x = Body.Temp))
g + geom_bar(aes(x = Body.Temp, fill = Gender))
g + geom_bar(aes(x = Body.Temp, fill = Gender, position = 'dodge'))
g + geom_bar(aes(x = Body.Temp, fill = Gender), position = 'dodge')
g + geom_density(aes(x = Body.Temp), fill = Gender)
g + geom_density(aes(x = Body.Temp, fill = Gender))
g + geom_density(aes(x = Body.Temp, color = Gender))
g + geom_density(aes(x = Heart.Rate, color = Gender))
g + geom_density(aes(x = Heart.Rate, color = Gender))
g + geom_density(aes(x = Body.Temp, color = Gender))
g + geom_point(aes(x = Body.Temp, y = Heart.Rate))
g + geom_point(aes(x = Body.Temp, y = Heart.Rate, color = Gender))
t.statistic = (mean(Body.Temp) - 98.6)/(sd(Body.Temp)/sqrt(nrows(temp)))
t.statistic = (mean(temp$Body.Temp) - 98.6)/(sd(temp$Body.Temp)/sqrt(nrows(temp)))
t.statistic = (mean(temp$Body.Temp) - 98.6)/(sd(temp$Body.Temp)/sqrt(nrow(temp)))
t.statistic
nrow(temp)
sd(temp$Body.Temp)
?sd
t.statistic = (mean(temp$Body.Temp) - 98.6)/(sd(temp$Body.Temp)/sqrt(nrow(temp)))
t.statistic
?pt
pt(t.statistic, nrow(temp)-1)
key_stats
key_stats = temp %>%
group_by(Gender) %>%
summarise(avg_temp = mean(Body.Temp), sd_temp = sd(Body.Temp),
avg_heart = mean(Heart.Rate), sd_heart = sd(Heart.Rate))
key_stats
mean(temp$Body.Temp)
sd(temp$Body.Temp)
?pt
?qnorm
qnorm(0.95)
qnorm(0.05)
qnorm(0.95, mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp))
qnorm(0.05, mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp))
qnorm(0.975, mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp))
qnorm(0.025, mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp))
qnorm(.5)
qnorm(.95)
qnorm(.97)
qnorm(.98)
qnorm(.975)
qnorm(c(0.025, 0.975), mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp))
qnorm(0)
qnorm(.50)
qnorm(.975)
t.test(temp$Body.Temp, mu = 98.6,
alternative = 'two.sided')
qnorm(c(0.025, 0.975), mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp))
qnorm(c(0.025, 0.975), mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp)/sqrt(130))
qnorm(c(0.025, 0.975), mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp)/sqrt(129))
qnorm(c(0.025, 0.975), mean = mean(temp$Body.Temp),
sd = sd(temp$Body.Temp)/sqrt(130))
?t.test
t.test(temp$Body.Temp, mu = 98.6,
alternative = 'two.sided')
male_temp = temp %>% filter(Gender == 'male')
female_temp = temp %>% filter(Gender == 'female')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = mean(male_temp$Body.Temp -
female_temp$Body.Temp)
)
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = mean(male_temp$Body.Temp) -
mean(female_temp$Body.Temp)
)
male_temp = temp %>% filter(Gender == 'male')
female_temp = temp %>% filter(Gender == 'female')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = mean(male_temp$Body.Temp) -
mean(female_temp$Body.Temp)
)
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = mean(male_temp$Body.Temp) -
mean(female_temp$Body.Temp))
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = c('two.sided'),
mu = mean(male_temp$Body.Temp) -
mean(female_temp$Body.Temp))
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = c('two.sided'),
mu = 0)
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = 0)
male_temp = temp %>% filter(Gender == 'male')
female_temp = temp %>% filter(Gender == 'female')
male_temp
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
male_temp = temp %>% filter(Gender == 'male')
female_temp = temp %>% filter(Gender == 'female')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = 0)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
t.test(temp$Body.Temp, mu = 98.6,
alternative = 'two.sided')
male_temp = temp %>% filter(Gender == 'Male')
female_temp = temp %>% filter(Gender == 'Female')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = 0)
?ftest
?f.test
?vartest
?var.test
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'two.sided')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
sd(male_temp$Heart.Rate)
sd(female_temp$Heart.Rate)
sd(male_temp$Heart.Rate)
sd(female_temp$Heart.Rate)
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
t.test(temp$Body.Temp, mu = 98.6,
alternative = 'two.sided')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided',
mu = 0)
sd(male_temp$Heart.Rate)
sd(female_temp$Heart.Rate)
?var.test
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
sd(male_temp$Heart.Rate)
sd(female_temp$Heart.Rate)
a^2 / b^2
a = sd(male_temp$Heart.Rate)
b = sd(female_temp$Heart.Rate)
a^2 / b^2
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'two.sided')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'greater')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'less')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'greater')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'less')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided', conf=0.975)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided', conf=0.025)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided')
sd(male_temp$Heart.Rate)
sd(female_temp$Heart.Rate)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'less')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'greater')
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided')
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided', conf.level = 0.05
mu = 0)
t.test(male_temp$Body.Temp, female_temp$Body.Temp,
alternative = 'two.sided', conf.level = 0.05,
mu = 0)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided', conf.level = 0.05)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'two.sided', conf.level = 0.95)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'less', conf.level = 0.95)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'greater', conf.level = 0.95)
PlantGrowth
str(PlantGrowth)
g + geom_boxplot(aes(x = group, y = weight))
g = ggplot(PlantGrowth)
g + geom_boxplot(aes(x = group, y = weight))
g + geom_point(aes(x = group, y = weight))
g + geom_boxplot(aes(x = group, y = weight))
?bartlett.test
table(PlantGrowth)
head(PlantGrowth)
bartlett.test(x = PlantGrowth$weight,
q = PlantGrowth$group)
bartlett.test(x = PlantGrowth$weight,
g = PlantGrowth$group)
?aov
weight ~ group
aov(weight ~ group ,data = PlantGrowth)
summarise(aov(weight ~ group ,data = PlantGrowth))
summary(aov(weight ~ group ,data = PlantGrowth))
g = ggplot(PlantGrowth)
g + geom_boxplot(aes(x = group, y = weight))
bartlett.test(x = PlantGrowth$weight,
g = PlantGrowth$group)
HairEyeColor
View(HairEyeColor)
HairEyeColor
mosaicplot(HairEyeColor, shade = T)
?mosaicplot
HairEyeColor
female_subset = HairEyeColor %>%
filter(Sex == 'Female' & Eye %in% c('Brown', 'Blue'))
df = data_frame(HairEyeColor)
str(HairEyeColor)
df = as.data.frame(HairEyeColor)
female_subset = df %>%
filter(Sex == 'Female' & Eye %in% c('Brown', 'Blue'))
mosaicplot(df, shade = T)
female_subset = df %>%
filter(Sex == 'Female' & (Eye %in% c('Brown', 'Blue')))
mosaicplot(df, shade = T)
View(df)
View(female_subset)
mosaicplot(female_subset, shade = T)
class(HairEyeColor)
class(female_subset)
female_subset = as.table(female_subset)
HairEyeColor
HairEyeColor(Sex == 'Female')
HairEyeColor[Sex == 'Female']
HairEyeColor[Sex == 'Female',]
HairEyeColor['Sex' == 'Female',]
HairEyeColor[1]
HairEyeColor[1,]
HairEyeColor[1,,]
HairEyeColor[,,,]
HairEyeColor[,,]
HairEyeColor[,]
head(HairEyeColor)
var.test(x = male_temp$Heart.Rate, y =female_temp$Heart.Rate,
alternative = 'less')
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate,
alternative = 'less')
var.test(female_temp$Heart.Rate, male_temp$Heart.Rate,
alternative = 'less')
?mosaicplot
class(HairEyeColor)
HairEyeColor(1:10,)
HairEyeColor[1:10,]
HairEyeColor[1:10,,]
HairEyeColor[1:12,,]
HairEyeColor[1:4,,]
HairEyeColor[,,2]
View(HairEyeColor[,,2])
View(HairEyeColor)
female_subset = subset(HairEyeColor, Sex == 'Female')
female_subset = filter(HairEyeColor, Sex == 'Female')
library(dplyr)
female_subset = filter(HairEyeColor, Sex == 'Female')
class(HairEyeColor)
?filter
female_subset = dply::filter(HairEyeColor, Sex == 'Female')
female_subset = dplyr::filter(HairEyeColor, Sex == 'Female')
df = as.data.frame(HairEyeColor)
female_subset = df %>%
filter(Sex == 'Female' & (Eye %in% c('Brown', 'Blue')))
str(female_subset)
?as.table
as.table(female_subset)
sauce = as.data.frame.table(female_subset)
sauce
female_subset
class(female_subset)
?subset
subset(HairEyeColor)
subset(HairEyeColor, Hair == 'Black')
subset(HairEyeColor, HairEyeColor$Hair == 'Black')
subset(HairEyeColor, HairEyeColorHair == 'Black')
?HairEyeColor
female_subset = HairEyeColor[,1:2,2]
View(female_subset)
mosaicplot(female_subset)
mosaicplot(female_subset, shade = T)
HairEyeColor
?HairEyeColor
?var.test
var.test(x = female_subset[,1,], y = female_subset[,2,],
alternative = c('two.sided'))
female_subset = HairEyeColor[,1:2,2]
var.test(x = female_subset[,1,], y = female_subset[,2,],
alternative = c('two.sided'))
class(female_subset[,1,])
class(female_subset)
dim(female_subset)
var.test(x = female_subset[,1], y = female_subset[,2],
alternative = c('two.sided'))
shiny::runApp('shinyApps/leaflet_demo')
runApp('shinyApps/shinyDashBoard')
runApp('~/NYCDS-R/shiny_db_demo/shiny_csv')
flights <- fread("./flights14.csv")
setwd("~/NYCDS-R/shiny_db_demo/shiny_csv")
flights <- fread("./flights14.csv")
head(flights)
setwd("~/NYCDS-R")
runApp('shiny_db_demo/shiny_csv')
setwd("~/NYCDS-R/shiny_db_demo/shiny_sqlite")
setwd("~/NYCDS-R")
getwd()
source('~/NYCDS-R/shiny_db_demo/shiny_sqlite/preProc.R')
source('~/NYCDS-R/shiny_db_demo/shiny_sqlite/preProc.R')
source('~/NYCDS-R/shiny_db_demo/shiny_sqlite/preProc.R')
getwd()
## connect to database
conn <- dbConnect(drv = SQLite(),
dbname = dbname)
source('~/NYCDS-R/shiny_db_demo/shiny_sqlite/preProc.R')
chisq.test(female_subset)
getwd()
shiny::runApp('flights/flights_final')
runApp('flights/flights')
setwd("~/NYCDS-R/flights/flights")
flights <- fread(file = "./flights14.csv")
View(flights)
runApp('~/git_proj/Shinyapp_Project_1')
runApp('~/git_proj/Shinyapp_Project_1')
runApp('~/git_proj/Shinyapp_Project_1')
runApp('~/git_proj/Shinyapp_Project_1')
runApp('~/git_proj/Shinyapp_Project_1')
write.csv(collisions, file='collisions_full.csv', row.names=FALSE)
getwd()
setwd("~/git_proj/Shinyapp_Project_1")
getwd()
write.csv(collisions, file='collisions_full.csv', row.names=FALSE)
str(collisions)
collisions_lite = select(collisions, c(date, borough, latitude, longitude,
number_of_persons_killed, time_24))
str(collisions_lite)
write.csv(collisions_lite, file='collisions_lite.csv', row.names=FALSE)
runApp()
